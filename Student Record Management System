#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100
#define FILENAME "students.dat"

typedef struct {
    int id;
    char name[50];
    float grades[3];
    float average;
} Student;

int studentCount = 0;
Student students[MAX_STUDENTS];

// Function Prototypes
void addStudent();
void editStudent();
void deleteStudent();
void displayStudents();
float computeAverage(float grades[], int n);
void saveToFile();
void loadFromFile();

int main() {
    int choice;
    loadFromFile();

    do {
        printf("\n==== Student Record Management ====\n");
        printf("1. Add Student\n");
        printf("2. Edit Student\n");
        printf("3. Delete Student\n");
        printf("4. Display All Students\n");
        printf("5. Save to File\n");
        printf("6. Exit\n");
        printf("Choose an option: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: addStudent(); break;
            case 2: editStudent(); break;
            case 3: deleteStudent(); break;
            case 4: displayStudents(); break;
            case 5: saveToFile(); break;
            case 6: printf("Exiting program...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while(choice != 6);

    return 0;
}

void addStudent() {
    if (studentCount >= MAX_STUDENTS) {
        printf("Student limit reached!\n");
        return;
    }

    Student *s = &students[studentCount];
    printf("Enter Student ID: ");
    scanf("%d", &s->id);
    printf("Enter Name: ");
    getchar(); // clear newline
    fgets(s->name, sizeof(s->name), stdin);
    s->name[strcspn(s->name, "\n")] = '\0'; // remove newline

    printf("Enter 3 grades:\n");
    for (int i = 0; i < 3; i++) {
        printf("Grade %d: ", i + 1);
        scanf("%f", &s->grades[i]);
    }

    s->average = computeAverage(s->grades, 3);
    studentCount++;
    printf("Student added successfully.\n");
}

void editStudent() {
    int id, found = 0;
    printf("Enter ID to edit: ");
    scanf("%d", &id);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            Student *s = &students[i];
            printf("Editing student: %s\n", s->name);
            printf("Enter new name: ");
            getchar();
            fgets(s->name, sizeof(s->name), stdin);
            s->name[strcspn(s->name, "\n")] = '\0';

            printf("Enter 3 new grades:\n");
            for (int j = 0; j < 3; j++) {
                printf("Grade %d: ", j + 1);
                scanf("%f", &s->grades[j]);
            }

            s->average = computeAverage(s->grades, 3);
            printf("Student updated.\n");
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Student not found.\n");
    }
}

void deleteStudent() {
    int id, found = 0;
    printf("Enter ID to delete: ");
    scanf("%d", &id);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            for (int j = i; j < studentCount - 1; j++) {
                students[j] = students[j + 1];
            }
            studentCount--;
            printf("Student deleted.\n");
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Student not found.\n");
    }
}

void displayStudents() {
    if (studentCount == 0) {
        printf("No student records.\n");
        return;
    }

    printf("\n%-5s %-20s %-10s %-10s %-10s %-10s\n", "ID", "Name", "Grade1", "Grade2", "Grade3", "Average");
    for (int i = 0; i < studentCount; i++) {
        Student *s = &students[i];
        printf("%-5d %-20s %-10.2f %-10.2f %-10.2f %-10.2f\n",
               s->id, s->name, s->grades[0], s->grades[1], s->grades[2], s->average);
    }
}

float computeAverage(float grades[], int n) {
    float sum = 0;
    for (int i = 0; i < n; i++) {
        sum += grades[i];
    }
    return sum / n;
}

void saveToFile() {
    FILE *fp = fopen(FILENAME, "wb");
    if (fp == NULL) {
        printf("Failed to open file for writing.\n");
        return;
    }

    fwrite(&studentCount, sizeof(int), 1, fp);
    fwrite(students, sizeof(Student), studentCount, fp);
    fclose(fp);
    printf("Data saved to '%s'.\n", FILENAME);
}

void loadFromFile() {
    FILE *fp = fopen(FILENAME, "rb");
    if (fp == NULL) {
        // No saved data yet
        return;
    }

    fread(&studentCount, sizeof(int), 1, fp);
    fread(students, sizeof(Student), studentCount, fp);
    fclose(fp);
}
    
